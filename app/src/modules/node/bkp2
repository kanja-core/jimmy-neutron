from __future__ import annotations
from dataclasses import dataclass, field
from typing import List, TypeVar
from ...typeAliases import LLMPrompt

from typing_extensions import Protocol


class DataclassProtocol(Protocol):
    __dataclass_fields__: dict  # minimal: just needs to exist


TInput = TypeVar("TInput", bound=DataclassProtocol)
TOutput = TypeVar("TOutput", bound=DataclassProtocol)


@dataclass
class NodePassInOutput[T]:
    data: T


@dataclass
class NodeParserInput:
    file_path: str = field(
        default="", metadata={"description": "Path to the file that needs to be parsed"}
    )


@dataclass
class NodeParserOutput:
    text: str = field(
        default="",
        metadata={"description": "Extracted text content from the parsed file"},
    )


@dataclass
class NodeRetrieverInput:
    prompt: List[LLMPrompt] = field(
        default_factory=list,
        metadata={
            "description": (
                "List of prompts to be sent to the LLM. Each prompt must be "
                "a dictionary with 'role' and 'content'. Roles can be 'system', "
                "'user', or 'assistant'."
            ),
            "examples": [
                [
                    {"role": "system", "content": "You are a helpful assistant."},
                    {"role": "user", "content": "What is the capital of France?"},
                ]
            ],
        },
    )


@dataclass
class NodeValidatorOutput:
    status: bool = field(
        default=False, metadata={"description": "Status of the validation"}
    )
